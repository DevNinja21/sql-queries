Joins
1. Employees Table
CREATE TABLE Employees (
    *emp\_id INT PRIMARY KEY,*

    *name VARCHAR(50),*

    *department\_id INT,*

    *salary INT*

);

INSERT INTO Employees (emp_id, name, department_id, salary) VALUES
(1, 'Alice', 101, 60000),
(2, 'Bob', 102, 55000),
(3, 'Charlie', 101, 70000),
(4, 'David', 103, 48000),
(5, 'Eve', NULL, 75000),
(6, 'Frank', 104, 52000),
(7, 'Grace', 102, 58000),
(8, 'Hannah', NULL, 62000);

🧱 2. Departments Table
CREATE TABLE Departments (
    *department\_id INT PRIMARY KEY,*

    *department\_name VARCHAR(50),*

    *location VARCHAR(50)*

);

INSERT INTO Departments (department_id, department_name, location) VALUES
(101, 'HR', 'New York'),
(102, 'IT', 'San Francisco'),
(103, 'Finance', 'Chicago'),
(104, 'Sales', 'Boston'),
(105, 'Marketing', 'Los Angeles');

🔍 20 Hands-on SQL JOIN Questions

🔹 INNER JOIN
List all employees along with their department names.
select * from employees join departments on employees.department_id=departments.department_id;
+--------+---------+---------------+--------+---------------+-----------------+---------------+
| emp_id | name    | department_id | salary | department_id | department_name | location      |
+--------+---------+---------------+--------+---------------+-----------------+---------------+
|      1 | Alice   |           101 |  60000 |           101 | HR              | New York      |
|      2 | Bob     |           102 |  55000 |           102 | IT              | San Francisco |
|      3 | Charlie |           101 |  70000 |           101 | HR              | New York      |
|      4 | David   |           103 |  48000 |           103 | Finance         | Chicago       |
|      6 | Frank   |           104 |  52000 |           104 | Sales           | Boston        |
|      7 | Grace   |           102 |  58000 |           102 | IT              | San Francisco |
+--------+---------+---------------+--------+---------------+-----------------+---------------+

Show the names of employees who work in the IT department.
select * from employees join departments on employees.department_id=departments.department_id where departments.department_name='IT';
+--------+-------+---------------+--------+---------------+-----------------+---------------+
| emp_id | name  | department_id | salary | department_id | department_name | location      |
+--------+-------+---------------+--------+---------------+-----------------+---------------+
|      2 | Bob   |           102 |  55000 |           102 | IT              | San Francisco |
|      7 | Grace |           102 |  58000 |           102 | IT              | San Francisco |
+--------+-------+---------------+--------+---------------+-----------------+---------------+

Get the names and locations of departments where at least one employee works.
select employees.name,departments.location from employees join departments on employees.department_id=departments.department_id;
+---------+---------------+
| name    | location      |
+---------+---------------+
| Alice   | New York      |
| Bob     | San Francisco |
| Charlie | New York      |
| David   | Chicago       |
| Frank   | Boston        |
| Grace   | San Francisco |
+---------+---------------+

Find employees who work in the same location as the 'HR' department.
select employees.name,departments.location from employees join departments on employees.department_id=departments.department_id where departments.department_name='HR';
+---------+----------+
| name    | location |
+---------+----------+
| Alice   | New York |
| Charlie | New York |
+---------+----------+

List department names and employee count (only departments with employees).
select count(employees.name),departments.department_name from employees join departments on employees.department_id=departments.department_id group by departments.department_name;
+-----------------------+-----------------+
| count(employees.name) | department_name |
+-----------------------+-----------------+
|                     2 | HR              |
|                     2 | IT              |
|                     1 | Finance         |
|                     1 | Sales           |
+-----------------------+-----------------+


🔹 LEFT JOIN
List all employees and their departments (even if they don’t belong to any department).
select employees.name,departments.department_name from employees left join departments on employees.department_id=departments.department_id ;
+---------+-----------------+
| name    | department_name |
+---------+-----------------+
| Alice   | HR              |
| Bob     | IT              |
| Charlie | HR              |
| David   | Finance         |
| Eve     | NULL            |
| Frank   | Sales           |
| Grace   | IT              |
| Hannah  | NULL            |
+---------+-----------------+

Find employees who are not assigned to any department.
select employees.name from employees left join departments on employees.department_id=departments.department_id where departments.department_name is null;
+--------+
| name   |
+--------+
| Eve    |
| Hannah |
+--------+

List all departments and the names of employees working in them (include departments without employees).
select departments.location,employees.name from employees left join departments on employees.department_id=departments.department_id;
+---------------+---------+
| location      | name    |
+---------------+---------+
| New York      | Alice   |
| San Francisco | Bob     |
| New York      | Charlie |
| Chicago       | David   |
| NULL          | Eve     |
| Boston        | Frank   |
| San Francisco | Grace   |
| NULL          | Hannah  |
+---------------+---------+

Show employee names and department names, replacing NULLs with 'Unassigned'.
select employees.name,departments.department_name,
    *-> case departments.department\_name*

    *-> when 'hr' or 'it' or 'finance' or 'sales' then departments.department\_name*

    *-> else 'unassigned'*

    *-> end as updated*

    *-> from employees left join departments on employees.department\_id=departments.department\_id;*

+---------+-----------------+------------+
| name    | department_name | updated    |
+---------+-----------------+------------+
| Alice   | HR              | HR         |
| Bob     | IT              | IT         |
| Charlie | HR              | HR         |
| David   | Finance         | Finance    |
| Eve     | NULL            | unassigned |
| Frank   | Sales           | Sales      |
| Grace   | IT              | IT         |
| Hannah  | NULL            | unassigned |
+---------+-----------------+------------+

Find departments where no employees are assigned.
select departments.department_name from employees left join departments on employees.department_id=departments.department_id where employees.emp_id is null;
Empty set (0.00 sec)

